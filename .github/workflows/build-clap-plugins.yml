name: Build CLAP Plugins

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  record-start-time:
    runs-on: windows-latest
    outputs:
      start_time: ${{ steps.start-time.outputs.start_time }}
    steps:
      - name: Record Start Time
        id: start-time
        run: echo "start_time=$(Get-Date -Format o)" >> $env:GITHUB_OUTPUT
        shell: pwsh

  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3

      - name: Generate plugin matrix from .sln files
        id: set-matrix
        run: |
          plugins=$(find Examples -maxdepth 2 -mindepth 2 -type f -name "*.sln" | awk -F/ '{ if ($(NF) == $(NF-1) ".sln") print "\""$(NF-1)"\"" }' | paste -sd "," -)
          [ -z "$plugins" ] && exit 1
          echo "matrix={\"plugin\":[${plugins}]}" >> $GITHUB_OUTPUT

  setup-clap:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout iPlug2 repository
        uses: actions/checkout@v3

      - name: Download CLAP SDK
        run: |
          # Remove any old directories if they exist
          rm -rf CLAP_SDK
          rm -rf CLAP_HELPERS

          # Clone the CLAP SDK and helpers into the correct directories
          git clone https://github.com/free-audio/clap.git CLAP_SDK
          git clone https://github.com/free-audio/clap-helpers.git CLAP_HELPERS

  build:
    needs: [record-start-time, generate-matrix, setup-clap]
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        plugin: ${{ fromJson(needs.generate-matrix.outputs.matrix).plugin }}
    name: Build CLAP Plugin ${{ matrix.plugin }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up MSBuild
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Restore NuGet packages
        run: nuget restore Examples/${{ matrix.plugin }}/${{ matrix.plugin }}.sln

      - name: Fix path in .vcxproj for IPlugEffect
        run: |
          sed -i 's|<Import Project="\$(SolutionDir)\\config\\IPlugEffect-win.props" />|<Import Project="\$(SolutionDir)..\\config\\IPlugEffect-win.props" />|' Examples/${{ matrix.plugin }}/projects/IPlugEffect-clap.vcxproj

      - name: Build CLAP plugin (${{ matrix.plugin }})
        run: |
          cd Examples/${{ matrix.plugin }}/projects
          $projName = "${{ matrix.plugin }}-clap.vcxproj"
          if (Test-Path $projName) {
            msbuild $projName /p:Configuration=Release /p:Platform=x64
          } else {
            echo "Project not found: $projName"
            exit 1
          }
        shell: pwsh

      - name: Upload CLAP Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.plugin }}-clap
          path: |
            **/*.clap

  notify:
    needs: [record-start-time, generate-matrix, build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send Discord Notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          STATUS_TIME: ${{ needs.record-start-time.result }}
          STATUS_MATRIX: ${{ needs.generate-matrix.result }}
          STATUS_BUILD: ${{ needs.build.result }}
          BRANCH: ${{ github.ref_name }}
          WORKFLOW: ${{ github.workflow }}
          RUN_ID: ${{ github.run_id }}
          REPO: ${{ github.repository }}
          START_TIME: ${{ needs.record-start-time.outputs.start_time }}
        run: |
          end_time=$(date -u +%s)
          start_time=$(date -d "$START_TIME" +%s 2>/dev/null || echo $end_time)
          duration=$((end_time - start_time))
          minutes=$((duration / 60))
          seconds=$((duration % 60))

          overall_status=":white_check_mark: SUCCESS"
          if [[ "$STATUS_TIME" != "success" || "$STATUS_MATRIX" != "success" || "$STATUS_BUILD" != "success" ]]; then
            overall_status=":x: FAILED"
          fi

          url="https://github.com/${REPO}/actions/runs/${RUN_ID}"
          message="**${WORKFLOW}** on branch \`${BRANCH}\` finished with status: **${overall_status}** in ${minutes}m ${seconds}s\n[View Logs](${url})"

          curl -X POST -H "Content-Type: application/json" \
            -d "{\"content\": \"$message\"}" \
            "$DISCORD_WEBHOOK"
