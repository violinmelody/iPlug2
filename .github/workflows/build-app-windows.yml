name: Build Windows Application

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  record-start-time:
    runs-on: windows-latest
    outputs:
      start_time: ${{ steps.start-time.outputs.start_time }}
    steps:
      - name: Record Start Time
        id: start-time
        run: echo "start_time=$(Get-Date -Format o)" >> $env:GITHUB_OUTPUT
        shell: pwsh

  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3

      - name: Generate plugin matrix from .sln files
        id: set-matrix
        run: |
          plugins=$(find Examples -maxdepth 2 -mindepth 2 -type f -name "*.sln" | awk -F/ '{ if ($(NF) == $(NF-1) ".sln") print "\""$(NF-1)"\"" }' | paste -sd "," -)
          [ -z "$plugins" ] && exit 1
          echo "matrix={\"plugin\":[${plugins}]}" >> $GITHUB_OUTPUT

  build-windows-app:
    needs: [record-start-time, generate-matrix]
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        plugin: ${{ fromJson(needs.generate-matrix.outputs.matrix).plugin }}
    name: Build Windows App ${{ matrix.plugin }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up MSBuild
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Restore NuGet packages
        run: nuget restore iplug2/Examples/${{ matrix.plugin }}/${{ matrix.plugin }}.sln

      - name: Set SolutionDir Environment Variable
        run: |
          # Explicitly set the SolutionDir environment variable to the root of the repository
          $env:SolutionDir = "D:\a\iPlug2\iPlug2"
          Write-Host "SolutionDir is set to $env:SolutionDir"
        shell: pwsh

      - name: Check if .vcxproj file exists
        run: |
          # Adjusting the file name to account for "-app" in the project name
          $vcxprojPath = "iplug2/Examples/${{ matrix.plugin }}/projects/${{ matrix.plugin }}-app.vcxproj"
          if (-Not (Test-Path $vcxprojPath)) {
            Write-Error "VCXProj file not found at $vcxprojPath"
            exit 1
          }
          Write-Host "Found .vcxproj file: $vcxprojPath"
        shell: pwsh

      - name: Fix path to IPlugEffect-win.props in the .vcxproj file using the updated SolutionDir
        run: |
          # Fix the path in the .vcxproj file
          sed -i 's|<Import Project="\$(SolutionDir)\\config\\IPlugEffect-win.props" />|<Import Project="\$(SolutionDir)\\..\\config\\IPlugEffect-win.props" />|' iplug2/Examples/${{ matrix.plugin }}/projects/${{ matrix.plugin }}-app.vcxproj
        shell: bash

      - name: Build Windows App (${{ matrix.plugin }}) for x64
        run: |
          cd iplug2/Examples/${{ matrix.plugin }}/projects
          $solutionPath = "iplug2/Examples/${{ matrix.plugin }}/${{ matrix.plugin }}.sln"
          $projName = "${{ matrix.plugin }}-app.vcxproj"  # Adjusted to use the "-app" suffix
          
          if (Test-Path $solutionPath) {
            # Use MSBuild to build the project from the solution
            msbuild $solutionPath /t:$projName /p:Configuration=Release /p:Platform=x64
          } else {
            echo "Solution not found: $solutionPath"
            exit 1
          }
        shell: pwsh

      - name: Upload Windows App Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.plugin }}-win
          path: |
            **/*.exe
            **/*.dll
            **/*.pdb

  notify:
    needs: [record-start-time, generate-matrix, build-windows-app]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send Discord Notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          STATUS_TIME: ${{ needs.record-start-time.result }}
          STATUS_MATRIX: ${{ needs.generate-matrix.result }}
          STATUS_BUILD: ${{ needs.build-windows-app.result }}
          BRANCH: ${{ github.ref_name }}
          WORKFLOW: ${{ github.workflow }}
          RUN_ID: ${{ github.run_id }}
          REPO: ${{ github.repository }}
          START_TIME: ${{ needs.record-start-time.outputs.start_time }}
        run: |
          end_time=$(date -u +%s)
          start_time=$(date -d "$START_TIME" +%s 2>/dev/null || echo $end_time)
          duration=$((end_time - start_time))
          minutes=$((duration / 60))
          seconds=$((duration % 60))

          overall_status=":white_check_mark: SUCCESS"
          if [[ "$STATUS_TIME" != "success" || "$STATUS_MATRIX" != "success" || "$STATUS_BUILD" != "success" ]]; then
            overall_status=":x: FAILED"
          fi

          url="https://github.com/${REPO}/actions/runs/${RUN_ID}"
          message="**${WORKFLOW}** on branch \`${BRANCH}\` finished with status: **${overall_status}** in ${minutes}m ${seconds}s\n[View Logs](${url})"

          curl -X POST -H "Content-Type: application/json" \
            -d "{\"content\": \"$message\"}" \
            "$DISCORD_WEBHOOK"
