name: Build Windows Application

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  record-start-time:
    runs-on: windows-latest
    outputs:
      start_time: ${{ steps.start-time.outputs.start_time }}
    steps:
      - name: Record Start Time
        id: start-time
        run: echo "start_time=$(Get-Date -Format o)" >> $env:GITHUB_OUTPUT
        shell: pwsh

  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3

      - name: Generate plugin matrix from .sln files
        id: set-matrix
        shell: bash
        run: |
          plugins=$(find Examples -maxdepth 2 -mindepth 2 -type f -name "*.sln" | awk -F/ '{print "\""$(NF-1)"\""}' | paste -sd "," -)
          if [ -z "$plugins" ]; then
            echo "No plugins found!"
            exit 1
          fi
          echo "matrix={\"plugin\":[${plugins}]}" >> $GITHUB_OUTPUT

  build-windows-app:
    needs: [record-start-time, generate-matrix]
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        plugin: ${{ fromJson(needs.generate-matrix.outputs.matrix).plugin }}
    name: Build Windows App ${{ matrix.plugin }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up MSBuild
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Build Windows App (${{ matrix.plugin }}) for x64 using .sln file
        working-directory: ${{ github.workspace }}/Examples/${{ matrix.plugin }}
        run: |
          $slnFile = "${{ matrix.plugin }}.sln"
          if (Test-Path $slnFile) {
            try {
              msbuild $slnFile /p:Configuration=Release /p:Platform=x64 /m
            } catch {
              Write-Host "Build failed for $slnFile, continuing..."
            }
          } else {
            Write-Error "Solution file not found: $slnFile"
            exit 1
          }
        shell: pwsh
        continue-on-error: true

      - name: Upload Windows App Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.plugin }}-win
          path: |
            Examples/${{ matrix.plugin }}/**/*.exe
            Examples/${{ matrix.plugin }}/**/*.dll
            Examples/${{ matrix.plugin }}/**/*.pdb

  notify:
    needs: [record-start-time, generate-matrix, build-windows-app]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send Discord Notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          STATUS_TIME: ${{ needs.record-start-time.result }}
          STATUS_MATRIX: ${{ needs.generate-matrix.result }}
          STATUS_BUILD: ${{ needs.build-windows-app.result }}
          BRANCH: ${{ github.ref_name }}
          WORKFLOW: ${{ github.workflow }}
          RUN_ID: ${{ github.run_id }}
          REPO: ${{ github.repository }}
          START_TIME: ${{ needs.record-start-time.outputs.start_time }}
        run: |
          end_time=$(date -u +%s)
          start_time=$(date -d "$START_TIME" +%s 2>/dev/null || echo $end_time)
          duration=$((end_time - start_time))
          minutes=$((duration / 60))
          seconds=$((duration % 60))

          overall_status=":white_check_mark: SUCCESS"
          if [[ "$STATUS_TIME" != "success" || "$STATUS_MATRIX" != "success" || "$STATUS_BUILD" != "success" ]]; then
            overall_status=":x: FAILED"
          fi

          url="https://github.com/${REPO}/actions/runs/${RUN_ID}"
          message="**${WORKFLOW}** on branch \`${BRANCH}\` finished with status: **${overall_status}** in ${minutes}m ${seconds}s\n[View Logs](${url})"

          curl -X POST -H "Content-Type: application/json" \
            -d "{\"content\": \"$message\"}" \
            "$DISCORD_WEBHOOK"
