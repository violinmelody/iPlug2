name: Build VST3 Plugins

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  cache-vst3-sdk:
    runs-on: windows-latest
    outputs:
      vst3_sdk_cached: ${{ steps.cache-sdk.outputs.cache-hit }}
      start_time: ${{ steps.start-time.outputs.start_time }}
    steps:
      - name: Record Start Time
        id: start-time
        run: echo "start_time=$(Get-Date -Format o)" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Reset workspace to avoid duplicate directories
        run: |
          if (Test-Path "${{ github.workspace }}\iPlug2") {
            Remove-Item -Recurse -Force "${{ github.workspace }}\iPlug2"
          }

      - uses: actions/checkout@v3

      - name: Cache VST3 SDK
        id: cache-sdk
        uses: actions/cache@v3
        with:
          path: iPlug2/Dependencies/IPlug/VST3_SDK
          key: vst3-sdk-windows-v1

      - name: Download and Extract VST3 SDK (if not cached)
        if: steps.cache-sdk.outputs.cache-hit != 'true'
        run: |
          echo "Running download-vst3-sdk.sh to download SDKs"
          cd "${{ github.workspace }}\Dependencies\IPlug"
          chmod +x ./download-vst3-sdk.sh
          ./download-vst3-sdk.sh
          dir "${{ github.workspace }}\Dependencies\IPlug\VST3_SDK"

      - name: Validate VST3 SDK structure
        run: |
          $sdkPath = "${{ github.workspace }}\Dependencies\IPlug\VST3_SDK"
          dir $sdkPath
          $mustExist = @("base/source", "base/thread", "pluginterfaces", "public.sdk/source")
          foreach ($rel in $mustExist) {
            $path = Join-Path $sdkPath $rel
            if (!(Test-Path $path)) {
              Write-Host "Missing expected folder: $path"
              exit 1
            }
          }
        shell: pwsh

  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3

      - name: Generate plugin matrix from .sln files
        id: set-matrix
        run: |
          plugins=$(find Examples -maxdepth 2 -mindepth 2 -type f -name "*.sln" | awk -F/ '{ if ($(NF) == $(NF-1) ".sln") print "\""$(NF-1)"\"" }' | paste -sd "," -)
          [ -z "$plugins" ] && exit 1
          echo "matrix={\"plugin\":[${plugins}]}" >> $GITHUB_OUTPUT

  build:
    needs: [cache-vst3-sdk, generate-matrix]
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        plugin: ${{ fromJson(needs.generate-matrix.outputs.matrix).plugin }}
    name: Build VST3 Plugin ${{ matrix.plugin }}

    steps:
      - uses: actions/checkout@v3

      - name: Restore cached VST3 SDK
        uses: actions/cache@v3
        with:
          path: iPlug2/Dependencies/IPlug/VST3_SDK
          key: vst3-sdk-windows-v1

      - name: Set VST3 SDK environment variable
        run: echo "VST3_SDK_PATH=${{ github.workspace }}\Dependencies\IPlug\VST3_SDK" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Verify VST3 SDK exists
        run: |
          if (!(Test-Path $env:VST3_SDK_PATH)) {
            echo "VST3 SDK directory not found"
            exit 1
          }
        shell: pwsh

      - name: Set up MSBuild
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Restore NuGet packages
        run: nuget restore Examples/${{ matrix.plugin }}/${{ matrix.plugin }}.sln

      - name: Build VST3 plugin (${{ matrix.plugin }})
        run: |
          cd Examples/${{ matrix.plugin }}/projects
          $projName = "${{ matrix.plugin }}-vst3.vcxproj"
          if (Test-Path $projName) {
            msbuild $projName /p:Configuration=Release /p:Platform=x64 /p:TargetName=VST3 /p:SolutionDir="${{ github.workspace }}\Examples\${{ matrix.plugin }}\"
          } else {
            echo "Project not found: $projName"
            exit 1
          }
        shell: pwsh

      - name: Upload VST3 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.plugin }}-vst3
          path: |
            **/*.vst3

  notify:
    needs: [cache-vst3-sdk, generate-matrix, build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send Discord Notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          STATUS_CACHE: ${{ needs.cache-vst3-sdk.result }}
          STATUS_MATRIX: ${{ needs.generate-matrix.result }}
          STATUS_BUILD: ${{ needs.build.result }}
          BRANCH: ${{ github.ref_name }}
          WORKFLOW: ${{ github.workflow }}
          RUN_ID: ${{ github.run_id }}
          REPO: ${{ github.repository }}
          START_TIME: ${{ needs.cache-vst3-sdk.outputs.start_time }}
        run: |
          end_time=$(date -u +%s)
          start_time=$(date -d "$START_TIME" +%s 2>/dev/null || echo $end_time)
          duration=$((end_time - start_time))
          minutes=$((duration / 60))
          seconds=$((duration % 60))

          # Determine overall status based on previous jobs' results
          overall_status="SUCCESS"
          if [[ "$STATUS_CACHE" != "success" || "$STATUS_MATRIX" != "success" || "$STATUS_BUILD" != "success" ]]; then
            overall_status="FAILED"
          fi

          url="https://github.com/${REPO}/actions/runs/${RUN_ID}"
          message="**${WORKFLOW}** on branch \`${BRANCH}\` finished with status: **${overall_status}** in ${minutes}m ${seconds}s\n[View Logs](${url})"

          curl -X POST -H "Content-Type: application/json" \
            -d "{\"content\": \"$message\"}" \
            "$DISCORD_WEBHOOK"
