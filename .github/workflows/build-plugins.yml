name: Build VST3 Plugins

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  cache-vst3-sdk:
    runs-on: windows-latest
    outputs:
      vst3_sdk_cached: ${{ steps.cache-sdk.outputs.cache-hit }}
    steps:
      - name: Reset workspace to avoid duplicate directories
        run: |
          # Ensuring the directory isn't duplicated by removing existing directories
          if [ -d "${{ github.workspace }}/iPlug2" ]; then
            echo "Removing existing iPlug2 directory to reset."
            rm -rf "${{ github.workspace }}/iPlug2"
          fi

      - uses: actions/checkout@v3

      - name: Cache VST3 SDK
        id: cache-sdk
        uses: actions/cache@v3
        with:
          path: iPlug2/Dependencies/IPlug/VST3_SDK
          key: vst3-sdk-windows-v1

      - name: Download and Extract VST3 SDK (if not cached)
        if: steps.cache-sdk.outputs.cache-hit != 'true'
        run: |
          echo "Running download-vst3-sdk.sh to download SDKs"
          echo "Current workspace: ${{ github.workspace }}"
          
          # Navigate to the correct directory where the download-vst3-sdk.sh is located
          cd "${{ github.workspace }}/iPlug2/Dependencies/IPlug"  # Adjusting path to avoid double directories

          # Verify if the script exists
          if [ ! -f "./download-vst3-sdk.sh" ]; then
            echo "Error: download-vst3-sdk.sh not found in ${{ github.workspace }}/iPlug2/Dependencies/IPlug"
            exit 1
          fi
          echo "Running download-vst3-sdk.sh in $(pwd)"
          
          # Ensure the script is executable
          chmod +x ./download-vst3-sdk.sh
          ./download-vst3-sdk.sh  # Execute the script

      - name: Validate VST3 SDK structure
        run: |
          sdkPath="${{ github.workspace }}\iPlug2\Dependencies\IPlug\VST3_SDK"
          mustExist=(
            "base\source"
            "base\thread"
            "pluginterfaces"
            "public.sdk\source"
          )
          for rel in "${mustExist[@]}"; do
            path="${sdkPath}\\$rel"
            if (!(Test-Path $path)) {
              Write-Host "Missing expected folder: $path"
              exit 1
            } else {
              Write-Host "Found: $path"
            }
          done
          Write-Host "VST3 SDK folder structure validated."
        shell: pwsh

  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3

      - name: Generate plugin matrix from .sln files
        id: set-matrix
        run: |
          plugins=$(find Examples -maxdepth 2 -mindepth 2 -type f -name "*.sln" | awk -F/ '{ if ($(NF) == $(NF-1) ".sln") print "\""$(NF-1)"\"" }' | paste -sd "," -)
          if [ -z "$plugins" ]; then
            echo "No valid .sln files found."
            exit 1
          fi
          matrix="{\"plugin\":[${plugins}]}"
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  build:
    needs: [cache-vst3-sdk, generate-matrix]
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        plugin: ${{ fromJson(needs.generate-matrix.outputs.matrix).plugin }}

    name: Build VST3 Plugin ${{ matrix.plugin }}

    steps:
      - uses: actions/checkout@v3

      - name: Restore cached VST3 SDK
        uses: actions/cache@v3
        with:
          path: iPlug2/Dependencies/IPlug/VST3_SDK
          key: vst3-sdk-windows-v1

      - name: Set VST3 SDK environment variable
        run: |
          echo "VST3_SDK_PATH=${{ github.workspace }}\iPlug2\Dependencies\IPlug\VST3_SDK" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Verify VST3 SDK exists
        run: |
          if (!(Test-Path $env:VST3_SDK_PATH)) {
            echo "VST3 SDK directory not found at path: $env:VST3_SDK_PATH"
            exit 1
          }
        shell: pwsh

      - name: Set up MSBuild
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Restore NuGet packages
        run: |
          nuget restore Examples/${{ matrix.plugin }}/${{ matrix.plugin }}.sln

      - name: Build VST3 plugin (${{ matrix.plugin }})
        run: |
          cd Examples/${{ matrix.plugin }}/projects
          $projName = "${{ matrix.plugin }}-vst3.vcxproj"
          if (Test-Path $projName) {
            echo "Found the .vcxproj file: $projName"
            msbuild $projName /p:Configuration=Release /p:Platform=x64 /p:TargetName=VST3 /p:SolutionDir="${{ github.workspace }}\Examples\${{ matrix.plugin }}\"
          } else {
            echo "Error: .vcxproj file not found: $projName"
            exit 1
          }
        shell: pwsh

      - name: Upload VST3 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.plugin }}-vst3
          path: |
            **/*.vst3
