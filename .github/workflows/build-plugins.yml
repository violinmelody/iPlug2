name: Build Plugins with Visual Studio Projects

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Enables manual run

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3

      - name: Generate plugin list
        id: set-matrix
        run: |
          plugins=$(ls -1 Examples | jq -R -s -c 'split("\n") | map(select(length > 0))')
          # Check each plugin directory for the presence of a .vcxproj file
          valid_plugins=()
          for plugin in $plugins; do
            if [ -f "Examples/${plugin}/*.vcxproj" ]; then
              valid_plugins+=("${plugin}")
            fi
          done
          echo "matrix={\"plugin\":${valid_plugins[@]}}" >> $GITHUB_OUTPUT

  build:
    needs: generate-matrix
    runs-on: windows-latest  # Build on Windows to use Visual Studio

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}

    name: Build ${{ matrix.plugin }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Visual Studio
        uses: microsoft/setup-msbuild@v1.0.2
        with:
          vs-version: 'latest'  # Use the latest Visual Studio version

      - name: Install dependencies (for Windows)
        run: |
          choco install visualstudio2019-workload-vctools # Ensure you have necessary tools

      - name: Build the plugin using Visual Studio project file
        run: |
          cd Examples/${{ matrix.plugin }}
          msbuild ${matrix.plugin}.vcxproj /p:Configuration=Release

      - name: Upload VST3 (if found)
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ matrix.plugin }}-vst3
          path: |
            Examples/${{ matrix.plugin }}/build/**/*.vst3
